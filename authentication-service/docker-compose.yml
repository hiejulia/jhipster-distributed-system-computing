version: "3.5"
services:
    # zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:5.0.1
    hostname: zookeeper
    networks:
      - app-net
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  # kafka
  kafka:
    image: confluentinc/cp-enterprise-kafka:5.0.1
    hostname: kafka
    networks:
      - app-net
      # create topic 
    command:
      - /bin/bash
      - -c
      - |
        /etc/confluent/docker/run &
        echo -e "\n\n⏳ Waiting for Kafka to be available before launching CLI\n"
        cub kafka-ready -b kafka:9092 1 20
        echo -e "\n\n-> Creating topic 'cc-authorization-topic'…\n"
        kafka-topics --create \
          --zookeeper zookeeper:2181 \
          --partitions 3 \
          --replication-factor 1 \
          --topic cc-authorization-topic
        echo -e "\n\n-> Sleeping…\n"
        sleep infinity
        
    environment:
      KAFKA_BROKER_ID: 101
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      CONFLUENT_METRICS_REPORTER_TOPIC_CREATE: "false"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_METRIC_REPORTERS: "io.confluent.metrics.reporter.ConfluentMetricsReporter"
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: "kafka:9092"
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100

      # Schema registry
  schema-registry:
    image: confluentinc/cp-schema-registry:5.0.1
    hostname: schema-registry
    networks:
      - app-net
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:2181
      SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8081

      # KSQL 
  ksql-server:
    image: confluentinc/cp-ksql-server:5.0.1
    hostname: ksql-server
    ports:
      - "8088:8088"
    networks:
      - app-net
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_LOG4J_OPTS: "-Dlog4j.configuration=file:/etc/ksql/log4j-rolling.properties"
      KSQL_BOOTSTRAP_SERVERS: "kafka:9092"
      KSQL_HOST_NAME: ksql-server
      KSQL_APPLICATION_ID: "ksql-demo"
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      KSQL_KSQL_SERVER_UI_ENABLED: "false"

  ksql-cli:
    image: confluentinc/cp-ksql-cli:5.0.1
    hostname: ksql-cli
    networks:
      - app-net
    volumes:
      - $PWD/ksql-scripts/:/data/scripts/
    entrypoint: 
      - /bin/bash
      - -c
      - |
        echo -e "\n\n⏳ Waiting for KSQL to be available before launching CLI\n"
        while [ $$(curl -s -o /dev/null -w %{http_code} http://ksql-server:8088/) -eq 000 ]
        do 
          echo -e $$(date) "KSQL Server HTTP state: " $$(curl -s -o /dev/null -w %{http_code} http://ksql-server:8088/) " (waiting for 200)"
          sleep 5
        done
        echo -e "\n\n-> Running KSQL commands\n"
        cat /data/scripts/ksql-scripts.sql <(echo 'EXIT')| ksql http://ksql-server:8088
        echo -e "\n\n-> Sleeping…\n"
        sleep infinity


        # Control center 
  control-center:
    image: confluentinc/cp-enterprise-control-center:5.0.1
    hostname: control-center
    restart: always
    networks:
      - app-net
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: kafka:9092
      CONTROL_CENTER_ZOOKEEPER_CONNECT: zookeeper:2181
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_REPLICATION: 1
      CONTROL_CENTER_INTERNAL_TOPICS_REPLICATION: 1
      CONTROL_CENTER_COMMAND_TOPIC_REPLICATION: 1
      CONTROL_CENTER_METRICS_TOPIC_REPLICATION: 1
      CONTROL_CENTER_STREAMS_NUM_STREAM_THREADS: 1
      CONTROL_CENTER_STREAMS_CONSUMER_REQUEST_TIMEOUT_MS: "960032"
      CONTROL_CENTER_CONNECT_CLUSTER: "connect:8083"
      CONTROL_CENTER_KSQL_URL: "http://ksql-server:8088"
      CONTROL_CENTER_KSQL_ADVERTISED_URL: "http://localhost:8088"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"

networks:
  app-net:
    version: "3.5"
    services:
      zookeeper:
        image: confluentinc/cp-zookeeper:5.0.1
        hostname: zookeeper
        networks:
          - app-net
        environment:
          ZOOKEEPER_CLIENT_PORT: 2181
          ZOOKEEPER_TICK_TIME: 2000
      
      kafka:
        image: confluentinc/cp-enterprise-kafka:5.0.1
        hostname: kafka
        networks:
          - app-net
        command:
          - /bin/bash
          - -c
          - |
            /etc/confluent/docker/run &
            echo -e "\n\n⏳ Waiting for Kafka to be available before launching CLI\n"
            cub kafka-ready -b kafka:9092 1 20
            echo -e "\n\n-> Creating topic 'cc-authorization-topic'…\n"
            kafka-topics --create \
              --zookeeper zookeeper:2181 \
              --partitions 3 \
              --replication-factor 1 \
              --topic cc-authorization-topic
            echo -e "\n\n-> Sleeping…\n"
            sleep infinity
            
        environment:
          KAFKA_BROKER_ID: 101
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
          KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
          KAFKA_DELETE_TOPIC_ENABLE: "true"
          CONFLUENT_METRICS_REPORTER_TOPIC_CREATE: "false"
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
          KAFKA_METRIC_REPORTERS: "io.confluent.metrics.reporter.ConfluentMetricsReporter"
          CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: "kafka:9092"
          KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
    
      schema-registry:
        image: confluentinc/cp-schema-registry:5.0.1
        hostname: schema-registry
        networks:
          - app-net
        environment:
          SCHEMA_REGISTRY_HOST_NAME: schema-registry
          SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:2181
          SCHEMA_REGISTRY_LISTENERS: http://schema-registry:8081
    
      ksql-server:
        image: confluentinc/cp-ksql-server:5.0.1
        hostname: ksql-server
        ports:
          - "8088:8088"
        networks:
          - app-net
        environment:
          KSQL_CONFIG_DIR: "/etc/ksql"
          KSQL_LOG4J_OPTS: "-Dlog4j.configuration=file:/etc/ksql/log4j-rolling.properties"
          KSQL_BOOTSTRAP_SERVERS: "kafka:9092"
          KSQL_HOST_NAME: ksql-server
          KSQL_APPLICATION_ID: "ksql-demo"
          KSQL_LISTENERS: "http://0.0.0.0:8088"
          KSQL_CACHE_MAX_BYTES_BUFFERING: 0
          KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
          KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
          KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
          KSQL_KSQL_SERVER_UI_ENABLED: "false"
    
      ksql-cli:
        image: confluentinc/cp-ksql-cli:5.0.1
        hostname: ksql-cli
        networks:
          - app-net
        volumes:
          - $PWD/ksql-scripts/:/data/scripts/
        entrypoint: 
          - /bin/bash
          - -c
          - |
            echo -e "\n\n⏳ Waiting for KSQL to be available before launching CLI\n"
            while [ $$(curl -s -o /dev/null -w %{http_code} http://ksql-server:8088/) -eq 000 ]
            do 
              echo -e $$(date) "KSQL Server HTTP state: " $$(curl -s -o /dev/null -w %{http_code} http://ksql-server:8088/) " (waiting for 200)"
              sleep 5
            done
            echo -e "\n\n-> Running KSQL commands\n"
            cat /data/scripts/ksql-scripts.sql <(echo 'EXIT')| ksql http://ksql-server:8088
            echo -e "\n\n-> Sleeping…\n"
            sleep infinity
    
      control-center:
        image: confluentinc/cp-enterprise-control-center:5.0.1
        hostname: control-center
        restart: always
        networks:
          - app-net
        ports:
          - "9021:9021"
        environment:
          CONTROL_CENTER_BOOTSTRAP_SERVERS: kafka:9092
          CONTROL_CENTER_ZOOKEEPER_CONNECT: zookeeper:2181
          CONTROL_CENTER_REPLICATION_FACTOR: 1
          CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_REPLICATION: 1
          CONTROL_CENTER_INTERNAL_TOPICS_REPLICATION: 1
          CONTROL_CENTER_COMMAND_TOPIC_REPLICATION: 1
          CONTROL_CENTER_METRICS_TOPIC_REPLICATION: 1
          CONTROL_CENTER_STREAMS_NUM_STREAM_THREADS: 1
          CONTROL_CENTER_STREAMS_CONSUMER_REQUEST_TIMEOUT_MS: "960032"
          CONTROL_CENTER_CONNECT_CLUSTER: "connect:8083"
          CONTROL_CENTER_KSQL_URL: "http://ksql-server:8088"
          CONTROL_CENTER_KSQL_ADVERTISED_URL: "http://localhost:8088"
          CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
    
    networks:
      app-net:
    